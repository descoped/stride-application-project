name: Build and Release to Maven Central

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Copy maven settings.xml
        run: |
          cat "${{ github.workspace }}/.github/settings.xml" > ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn --batch-mode clean package

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | base64 -d | gpg --batch --import
          gpg --list-secret-keys --keyid-format=long

      - name: Publish to Central Repository
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USER }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
        run: |
          mvn --batch-mode --no-transfer-progress deploy \
            -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -DskipTests \
            -P oss-maven-central

#      - name: Get latest tag
#        id: latest_tag
#        run: |
#          echo "{tag_name}=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
#          echo "tag_name: $GITHUB_OUTPUT"
#
#      - name: Update badge
#        uses: actions/github-script@v3
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          script: |
#            const ref = process.env.GITHUB_REF;
#            const { tag_name } = ${{ steps.latest_tag.outputs }};
#            const badge = `![Latest Tag](https://img.shields.io/github/v/${ref}/${tag_name}.svg)`;
#            const readme = await context.github.repos.getReadme({ref});
#            const content = readme.data.content;
#            const encodedContent = Buffer.from(content, 'base64').toString();
#            const newContent = encodedContent.replace(/!\[Latest Tag\].*\n/, badge + '\n');
#            const newEncodedContent = Buffer.from(newContent).toString('base64');
#            await context.github.repos.updateFile({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              path: 'README.md',
#              message: `Update Latest Tag Badge to ${tag_name}`,
#              content: newEncodedContent,
#              sha: readme.data.sha,
#              branch: ref,
#            });
